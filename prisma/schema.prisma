// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  address       String?
  city          String?
  zipCode       String?
  phoneNumber   String?
  cardNumber    String?
  accounts      Account[]
  sessions      Session[]
  savedItems    Item[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Item {
  id        String   @id @default(cuid())
  name      String
  brand     String
  size      Size[]
  color     Color[]
  sex       String //TODO: ENUM 'M' | 'F' | 'U'
  price     Int
  image     String // TODO: String[]
  description String?
  fabrics   String?    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  savedBy   User[]
  orders    Order[]
}

model Size {
  id        String   @id @default(cuid())
  name      String  //TODO: ENUM 'XS' | 'S' | 'M' | 'L' | 'XL';
  available Int
  items     Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  color     Color[] 
}

model Color {
  id        String   @id @default(cuid())
  name      String
  hex       String
  available Int
  items     Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  size      Size[]
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  status    String
  address   String
  city      String
  zipCode   String
}

