generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  address       String?
  city          String?
  zipCode       String?
  phoneNumber   String?
  cardNumber    String?
  joinedAt      DateTime  @default(now())
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  savedItems    Item[]
  orders        Order[]
  cart          Cart?
}

enum Role {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id          String     @id @default(cuid())
  name        String
  brand       String
  sex         Sex
  price       Int
  images      Image[]
  description String     @default("No description provided") @db.Text
  category    Category[]
  fabrics     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  views       Int        @default(0)
  sizes       Size[]
  colors      Color[]
  savedBy     User[]
  OrderItem    OrderItem[]
}

model Image {
  id       String  @id @default(cuid())
  filename String
  url      String?
  itemId   String
  items    Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  items Item[]
}

enum Sex {
  MALE
  FEMALE
  UNISEX
}

model Size {
  id        String     @id @default(cuid())
  name      SizeName
  available Int
  itemId    String
  items     Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  colors    Color[]
  OrderItem  OrderItem[]

  @@index([itemId])
}

enum SizeName {
  XS
  S
  M
  L
  XL
}

model Color {
  id        String     @id @default(cuid())
  name      String
  hex       String
  available Int
  itemId    String
  items     Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  sizes     Size[]
  OrderItem  OrderItem[]

  @@index([itemId])
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  status    String  @default("PENDING")
  address   String
  city      String
  zipCode   String
  items     OrderItem[]
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique
  items     OrderItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int      @default(1)
  itemId    String
  sizeId    String
  colorId   String
  cartId    String?
  orderId   String?
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  size      Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  cart      Cart?    @relation(fields: [cartId], references: [id])     
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  color     Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([itemId])
  @@index([sizeId])
  @@index([colorId])
  @@index([orderId])
}
